
1. What is the difference between var, let, and const? (prep notes)
Ans: In JavaScript, `var`, `let`, and `const` are used to declare variables, but they have key differences in scope, reassignability, and hoisting behavior:

### 1. **Scope:**

- **`var`:**
  - Has **function scope**. Variables declared with `var` are scoped to the function they are declared in, or globally if declared outside of a function.
  - Can be accessed from outside a block (like `if` or `for`), which can lead to unexpected behaviors.

- **`let`:**
  - Has **block scope**. Variables declared with `let` are only accessible within the block (`{}`) they are defined in, like in loops, if-statements, etc.
  - This reduces the risk of unintended behavior by limiting the variable's accessibility.

- **`const`:**
  - Like `let`, `const` also has **block scope**.

### 2. **Reassignability:**

- **`var`:**
  - Variables declared with `var` can be reassigned.
  
- **`let`:**
  - Variables declared with `let` can also be reassigned.

- **`const`:**
  - Variables declared with `const` **cannot be reassigned** once initialized. However, if it's an object or array, you can still modify the properties or elements of that object or array (but you cannot reassign the entire object/array).

### 3. **Hoisting:**

- **`var`:**
  - Variables declared with `var` are **hoisted** to the top of their scope, meaning they can be used before their declaration, though they will be initialized with `undefined` until the line where the variable is declared.

- **`let` and `const`:**
  - Variables declared with `let` and `const` are also **hoisted**, but they are in a "temporal dead zone" from the start of the block until their declaration, meaning they cannot be accessed before they are declared.

### Example:

```javascript
console.log(a); // undefined
var a = 10;

console.log(b); // ReferenceError: Cannot access 'b' before initialization
let b = 20;

const c = 30;
c = 40; // TypeError: Assignment to constant variable.
```

In summary:
- **Use `var`** only if you're dealing with older code or need function-scoped variables.
- **Use `let`** for variables that will change.
- **Use `const`** for variables that should not be reassigned.
----------------------------------------------------------------------------------------------------------------------------------------------------
2.what is Varible legal and ilegal shawdoing? (prepNotes)
3.What is the initializer of const?
4.what is execution context?(prepNotes)
5.what is Hoisting?(prepNotes)
6.what is scope?(RdNotes)
7.Defination of Map method with example?(RdNotes)
8.Defination of Filter method with example?(RdNotes)
9.Defination of Reduce method with example?(RdNotes)
10.Write Polyfill for Map method?(Polyfills\mapPOly.js)
11.Write Polyfill for Filter method?(Polyfills\filterpoly.js)
12.Write Polyfill for Filter method?(Polyfills\reducePoly.js)
13.Write Polyfill for ForEach method?(Polyfills\foreachPoly.js)
14.Map vs ForEach?(RdNotes) (modify,return and chaining)
15.(RoadsideCoder jAVASCRIPT\Qns1.js)
let students = [
  { name: "aaa", roll: 5, marks: 80 },
  { name: "b", roll: 15, marks: 20 }, 
  { name: "cc", roll: 25, marks: 30 }, 
  { name: "dd", roll: 10, marks: 60 },
  { name: "Eio", roll: 1, marks: 100 },
];

a.return students name in "Capital Letter":
b.rerturns those student details have more than 50 marks:
c.rerturns  those student details have more than 40 marks & rollnumber > 10:
d.sum of marks of all students:
e.return only name of the students who scrore > 50:
f.Return total marks of the students with marks > 60  and afetr added 20 marks to those marks will be < 60:
16.Function Declaration/Declaration vs Function Expression?(RdNotes)
17.First class Function?(RdNotes)
18.Parameter vs Arguments?(RdNotes)
19.Output?(RoadsideCoder jAVASCRIPT\Qns2.js)

(function(x){
    return (function(y){
        console.log(x)
    })(2)
})(1)

20.what is closures?(prepNotes)
21.what is lexical scope?(prepNotes)
22.Guess Output : (RoadsideCoder jAVASCRIPT\Qns3.js)
1.for(let  i = 0 ; i<5 ; i++){                 
    setTimeout(()=>{                   
        console.log(i)
    },i * 1000)
}
2.for(var j = 0 ; j<5 ; j++){
    setTimeout(()=>{
        console.log(j)
    },j * 1000)
} 
23.spread vs rest Parameter?(D:\PERSONAL INTERVIEW\Question5.js)
24.Guess Output
const fn = (a,...numbers,x,y) => {
    console.log(x,y,numbers)
   }

   fn(2,3,4,6,8,10)
25.Defination of callback function with example?(RdNotes)
26.Arrow function vs Normal Function?(RdNotes) (tips:syntax,this,constructor and prototype,argumets keyword)
27.Guess Output :
let user  =  {
    usename : 'Subhra',

    rc1: () =>{
      console.log(this.usename,"arrow")
    },
    rc2(){
        console.log(this.usename,"normal")
    }
}
user.rc1()
user.rc2()
28.Guess Output:

//
var a = 50;
function pp() {
  var x = 20;

  function cc() {
    console.log(x, a);
  }
  cc();
}
pp();
//
29.Guess output:

//
let c  = 0;

(function print(){
    if(c === 0){
        let c = 1;
        console.log(c)
    }
    console.log(c)
})()
//
30.Write a function for this?(RoadsideCoder jAVASCRIPT\Qns8.js)
var addsix  =  createBase(6)

addsix(10)  // return 16
addsix(21)  // return 27
